name: MobSF Security Scan

on:
  push:
    branches: [ main ]
  workflow_dispatch:

jobs:
  mobsf-scan:
    runs-on: ubuntu-latest
    env:
      MOBSF_API_KEY: ${{ secrets.MOBSF_API_KEY }}
    services:
      mobsf:
        image: opensecurity/mobile-security-framework-mobsf:latest
        ports:
          - 8000:8000
        env:
          MOBSF_API_KEY: ${{ secrets.MOBSF_API_KEY }}
        options: >-
          --health-cmd="curl -f http://localhost:8000" 
          --health-interval=10s 
          --health-timeout=5s 
          --health-retries=10

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install requests

      - name: Wait for MobSF to start
        run: |
          echo "Waiting for MobSF to become available..."
          for i in {1..30}; do
            if curl -s http://localhost:8000 | grep -q "MobSF"; then
              echo "MobSF is up!"
              break
            fi
            echo "Waiting..."
            sleep 5
          done

      - name: Find mobile app files
        id: find-files
        run: |
          echo "apk_files<<EOF" >> $GITHUB_OUTPUT
          find . -type f -name "*.apk" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

          echo "ipa_files<<EOF" >> $GITHUB_OUTPUT
          find . -type f -name "*.ipa" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Scan with MobSF and save reports
        run: |
          mkdir -p mobsf-reports

          scan_file() {
            FILE_PATH="$1"
            FILE_TYPE="$2"
            FILE_NAME=$(basename "$FILE_PATH")
            REPORT_BASE_NAME=$(echo "$FILE_NAME" | sed 's/\.[^.]*$//')

            echo "Uploading $FILE_NAME to MobSF..."
            UPLOAD_RESPONSE=$(curl -s -F "file=@\"$FILE_PATH\"" http://localhost:8000/api/v1/upload -H "Authorization: $MOBSF_API_KEY")
            HASH=$(echo "$UPLOAD_RESPONSE" | python3 -c "import sys, json; print(json.load(sys.stdin).get('hash', ''))")

            if [ -z "$HASH" ]; then
              echo "Upload failed or no hash returned."
              return 1
            fi

            echo "Starting scan..."
            curl -s -X POST http://localhost:8000/api/v1/scan \
              -H "Authorization: $MOBSF_API_KEY" \
              -H "Content-Type: application/x-www-form-urlencoded" \
              --data-urlencode "scan_type=$FILE_TYPE" \
              --data-urlencode "hash=$HASH" \
              --data-urlencode "re_scan=0"

            echo "Downloading PDF report..."
            curl -s -X POST http://localhost:8000/api/v1/download_pdf \
              -H "Authorization: $MOBSF_API_KEY" \
              -H "Content-Type: application/x-www-form-urlencoded" \
              --data-urlencode "hash=$HASH" \
              -o "mobsf-reports/${REPORT_BASE_NAME}.pdf"

            echo "Downloading JSON report..."
            curl -s -X POST http://localhost:8000/api/v1/report_json \
              -H "Authorization: $MOBSF_API_KEY" \
              -H "Content-Type: application/x-www-form-urlencoded" \
              --data-urlencode "hash=$HASH" \
              -o "mobsf-reports/${REPORT_BASE_NAME}.json"

            echo "Scan completed for $FILE_NAME"
          }

          if [ -n "${{ steps.find-files.outputs.apk_files }}" ]; then
            while IFS= read -r file; do
              [ -n "$file" ] && scan_file "$file" "apk"
            done <<< "${{ steps.find-files.outputs.apk_files }}"
          fi

          if [ -n "${{ steps.find-files.outputs.ipa_files }}" ]; then
            while IFS= read -r file; do
              [ -n "$file" ] && scan_file "$file" "ipa"
            done <<< "${{ steps.find-files.outputs.ipa_files }}"
          fi

      - name: Upload scan reports
        uses: actions/upload-artifact@v4
        with:
          name: mobsf-scan-reports
          path: mobsf-reports/
          retention-days: 14
        if: always()
